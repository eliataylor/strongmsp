# Generated by Django 5.1.10 on 2025-10-17 05:39

import django.db.models.deletion
from django.db import migrations, models


def migrate_assessments_to_products(apps, schema_editor):
    """
    Copy assessment data from Payments to their associated Products.
    If multiple payments reference the same product with different assessments,
    we'll use the most recent payment's assessments.
    """
    Payments = apps.get_model('strongmsp_app', 'Payments')
    Products = apps.get_model('strongmsp_app', 'Products')
    
    # Group payments by product and get the most recent payment for each product
    product_assessments = {}
    
    for payment in Payments.objects.filter(product__isnull=False).order_by('-created_at'):
        product_id = payment.product_id
        if product_id not in product_assessments:
            product_assessments[product_id] = {
                'pre_assessment': payment.pre_assessment,
                'post_assessment': payment.post_assessment
            }
    
    # Update products with assessment data
    for product_id, assessments in product_assessments.items():
        Products.objects.filter(id=product_id).update(
            pre_assessment=assessments['pre_assessment'],
            post_assessment=assessments['post_assessment']
        )


def reverse_migrate_assessments_to_payments(apps, schema_editor):
    """
    Reverse migration: copy assessment data from Products back to Payments.
    This is a best-effort approach since we can't guarantee which payment
    should get the product's assessments.
    """
    Payments = apps.get_model('strongmsp_app', 'Payments')
    Products = apps.get_model('strongmsp_app', 'Products')
    
    for product in Products.objects.filter(
        models.Q(pre_assessment__isnull=False) | models.Q(post_assessment__isnull=False)
    ):
        # Update all payments for this product with the product's assessments
        Payments.objects.filter(product=product).update(
            pre_assessment=product.pre_assessment,
            post_assessment=product.post_assessment
        )


class Migration(migrations.Migration):

    dependencies = [
        ('strongmsp_app', '0010_payments_discount_applied_organizations_and_more'),
    ]

    operations = [
        # First, add the fields to Products
        migrations.AddField(
            model_name='products',
            name='post_assessment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Post-Assessment'),
        ),
        migrations.AddField(
            model_name='products',
            name='pre_assessment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Pre-Assessment'),
        ),
        # Migrate data from Payments to Products
        migrations.RunPython(migrate_assessments_to_products, reverse_migrate_assessments_to_payments),
        # Finally, remove the fields from Payments
        migrations.RemoveField(
            model_name='payments',
            name='post_assessment',
        ),
        migrations.RemoveField(
            model_name='payments',
            name='pre_assessment',
        ),
    ]
