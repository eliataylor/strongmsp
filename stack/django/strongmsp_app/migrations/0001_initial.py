# Generated by Django 5.1.10 on 2025-10-30 08:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import strongmsp_app.models
import utils.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('real_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Real Name')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Avatar')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Photo')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('rather_not_say', 'Rather Not Say')], max_length=15, null=True, verbose_name='Gender')),
                ('ethnicity', models.JSONField(blank=True, help_text='Array of ethnicity choices - allows multiple selection', null=True, verbose_name='Ethnicity')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Birthdate')),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Zip Code')),
                ('category_performance_mindset', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Performance Mindset Score')),
                ('category_emotional_regulation', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Emotional Regulation Score')),
                ('category_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Confidence Score')),
                ('category_resilience_motivation', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Resilience & Motivation Score')),
                ('category_concentration', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Concentration Score')),
                ('category_leadership', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Leadership Score')),
                ('category_mental_wellbeing', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Mental Well-being Score')),
                ('category_total_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Sum of Category Averages for sorting only')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_login'],
            },
            bases=(models.Model, utils.models.BumpParentsModelMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(verbose_name='Order')),
                ('conditions', models.JSONField(blank=True, null=True, verbose_name='Conditions')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assessment Question',
                'verbose_name_plural': 'Assessment Questions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('questions', models.ManyToManyField(related_name='questions_to_assessments', to='strongmsp_app.assessmentquestions', verbose_name='Questions')),
            ],
            options={
                'verbose_name': 'Assessment',
                'verbose_name_plural': 'Assessments',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentResponses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('purpose', models.CharField(choices=[('lesson_plan', 'Lesson Plan'), ('curriculum', 'Curriculum'), ('talking_points', 'Talking Points'), ('feedback_report', 'Feedback Report'), ('scheduling_email', 'Scheduling Email')], max_length=50, verbose_name='Purpose')),
                ('message_body', models.TextField(verbose_name='Message Body')),
                ('ai_response', models.TextField(verbose_name='AI Response')),
                ('ai_reasoning', models.TextField(blank=True, null=True, verbose_name='AI Reasoning')),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('assessment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Assessment')),
            ],
            options={
                'verbose_name': 'Agent Response',
                'verbose_name_plural': 'Agent Responses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Organization Name')),
                ('short_name', models.CharField(blank=True, help_text='Short name displayed in header (e.g., "SMSP")', max_length=100, null=True, verbose_name='Short Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Subdomain Slug')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='organization_logos/', verbose_name='Organization Logo')),
                ('custom_logo_base64', models.TextField(blank=True, help_text='Legacy field - use logo field instead', null=True, verbose_name='Custom Logo (Base64)')),
                ('branding_palette', models.JSONField(blank=True, help_text='{"light": {"primary": {"main": "#877010"}, "secondary": {"main": "#2a74b7"}}, "dark": {...}}', null=True, verbose_name='Color Palette')),
                ('branding_typography', models.JSONField(blank=True, help_text='{"fontFamily": "Montserrat"}', null=True, verbose_name='Typography Settings')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Contact Phone')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentAssignments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('pre_assessment_submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Pre-Assessment Submitted At')),
                ('post_assessment_submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Post-Assessment Submitted At')),
                ('athlete', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('coaches', models.ManyToManyField(blank=True, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Coaches')),
                ('organization', models.ForeignKey(help_text='Denormalized from payment.organization for constraint performance', on_delete=django.db.models.deletion.CASCADE, related_name='payment_assignments', to='strongmsp_app.organizations', verbose_name='Organization')),
                ('parents', models.ManyToManyField(blank=True, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Parents')),
                ('pre_assessment', models.ForeignKey(help_text='Denormalized from payment.product.pre_assessment for constraint performance', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='strongmsp_app.assessments', verbose_name='Pre-Assessment')),
            ],
            options={
                'verbose_name': 'Payment Assignment',
                'verbose_name_plural': 'Payment Assignments',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoachContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(verbose_name='Title')),
                ('body', models.TextField(verbose_name='Body')),
                ('screenshot_light', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.screenshot_upload_path, verbose_name='Screenshot Light')),
                ('screenshot_dark', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.screenshot_upload_path, verbose_name='Screenshot Dark')),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('authenticated', ' authenticated'), ('mentioned', ' mentioned')], default='mentioned', max_length=13, verbose_name='Privacy')),
                ('purpose', models.CharField(blank=True, choices=[('lesson_plan', 'Lesson Plan'), ('curriculum', 'Curriculum'), ('talking_points', 'Talking Points'), ('feedback_report', 'Feedback Report'), ('scheduling_email', 'Scheduling Email')], max_length=50, null=True, verbose_name='Purpose')),
                ('coach_delivered', models.DateTimeField(blank=True, null=True, verbose_name='Coach Delivered At')),
                ('athlete_received', models.DateTimeField(blank=True, null=True, verbose_name='Athlete Received At')),
                ('parent_received', models.DateTimeField(blank=True, null=True, verbose_name='Parent Received At')),
                ('athlete', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Coach')),
                ('source_draft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='published_content', to='strongmsp_app.agentresponses', verbose_name='Source Draft')),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.paymentassignments', verbose_name='Payment Assignment')),
            ],
            options={
                'verbose_name': 'Coach Content',
                'verbose_name_plural': 'Coach Contents',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agentresponses',
            name='assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='strongmsp_app.paymentassignments', verbose_name='Payment Assignment'),
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('paid', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Paid')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('refunded', 'Refunded')], max_length=10, verbose_name='Status')),
                ('subscription_ends', models.DateField(blank=True, null=True, verbose_name='Subscription Ends')),
                ('features_snapshot', models.JSONField(blank=True, help_text='Copy of product features at purchase time', null=True, verbose_name='Features Snapshot')),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Payment Intent ID')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Customer ID')),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Subscription ID')),
                ('discount_applied', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Discount Applied')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='strongmsp_app.organizations', verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='paymentassignments',
            name='payment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='strongmsp_app.payments', verbose_name='Payment'),
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('stripe_product_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Product ID')),
                ('stripe_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Price ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('features', models.JSONField(blank=True, help_text='JSON containing agents, content_variations, and assessment counts', null=True, verbose_name='Features')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Post-Assessment')),
                ('pre_assessment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='strongmsp_app.assessments', verbose_name='Pre-Assessment')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payments',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.products', verbose_name='Product'),
        ),
        migrations.CreateModel(
            name='OrganizationProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured')),
                ('display_order', models.IntegerField(default=0, verbose_name='Display Order')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_products', to='strongmsp_app.organizations')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_organizations', to='strongmsp_app.products')),
            ],
            options={
                'verbose_name': 'Organization Product',
                'verbose_name_plural': 'Organization Products',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromptTemplates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('prompt', models.TextField(verbose_name='Prompt')),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='Instructions')),
                ('model', models.CharField(blank=True, max_length=255, null=True, verbose_name='Model')),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', ' archived')], default='active', max_length=8, verbose_name='Status')),
                ('purpose', models.CharField(choices=[('lesson_plan', 'Lesson Plan'), ('curriculum', 'Curriculum'), ('talking_points', 'Talking Points'), ('feedback_report', 'Feedback Report'), ('scheduling_email', 'Scheduling Email')], max_length=50, verbose_name='Purpose')),
                ('response_format', models.CharField(blank=True, choices=[('text', 'Text'), ('json', 'Json')], default='text', max_length=4, null=True, verbose_name='Response Format')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prompt Template',
                'verbose_name_plural': 'Prompt Templates',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payments',
            name='prompt_templates',
            field=models.ManyToManyField(blank=True, related_name='payments', to='strongmsp_app.prompttemplates', verbose_name='Prompt Templates'),
        ),
        migrations.AddField(
            model_name='agentresponses',
            name='prompt_template',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.prompttemplates', verbose_name='Prompt Template'),
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('help_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Help Text')),
                ('question_category', models.CharField(blank=True, choices=[('performance_mindset', 'Performance Mindset'), ('emotional_regulation', ' Emotional Regulation'), ('confidence', ' Confidence'), ('resilience__motivation', 'Resilience & Motivation'), ('concentration', ' Concentration'), ('leadership', ' Leadership'), ('mental_wellbeing', ' Mental Well-being')], max_length=22, null=True, verbose_name='Question Category')),
                ('scale', models.CharField(blank=True, choices=[('percentage', 'Percentage'), ('onetofive', 'One-to-five'), ('onetoten', 'One-to-ten')], max_length=10, null=True, verbose_name='Scale')),
                ('scale_choice_labels', models.JSONField(blank=True, null=True, verbose_name='Scale Choice Labels')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionResponses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('response', models.IntegerField(verbose_name='Response')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='strongmsp_app.assessments', verbose_name='Assessment')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='strongmsp_app.questions', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Question Response',
                'verbose_name_plural': 'Question Responses',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='assessmentquestions',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_questions', to='strongmsp_app.questions', verbose_name='Question'),
        ),
        migrations.CreateModel(
            name='Shares',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('expires', models.DateField(blank=True, null=True, verbose_name='Expires')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('content', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.coachcontent', verbose_name='Content')),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
            ],
            options={
                'verbose_name': 'Share',
                'verbose_name_plural': 'Shares',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SignUpCodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Sign-up Code')),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount'), ('free', 'Free Access')], default='percentage', max_length=10, verbose_name='Discount Type')),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Discount Value')),
                ('max_uses', models.IntegerField(blank=True, help_text='Leave blank for unlimited', null=True, verbose_name='Max Uses')),
                ('current_uses', models.IntegerField(default=0, verbose_name='Current Uses')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid From')),
                ('valid_until', models.DateTimeField(blank=True, null=True, verbose_name='Valid Until')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('applicable_products', models.ManyToManyField(blank=True, related_name='signup_codes', to='strongmsp_app.products')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signup_codes', to='strongmsp_app.organizations')),
            ],
            options={
                'verbose_name': 'Sign-up Code',
                'verbose_name_plural': 'Sign-up Codes',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payments',
            name='signup_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='strongmsp_app.signupcodes', verbose_name='Sign-up Code Used'),
        ),
        migrations.CreateModel(
            name='UserOrganizations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='Joined At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_users', to='strongmsp_app.organizations')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Organization',
                'verbose_name_plural': 'User Organizations',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField(verbose_name='Message')),
                ('message_text', models.TextField(blank=True, help_text='Plain text version for SMS and plain email', null=True, verbose_name='Text Message')),
                ('message_html', models.TextField(blank=True, help_text='HTML version for email', null=True, verbose_name='HTML Message')),
                ('channel', models.CharField(choices=[('dashboard', 'Dashboard'), ('email', 'Email'), ('sms', 'SMS')], default='dashboard', max_length=20, verbose_name='Channel')),
                ('delivery_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', max_length=20, verbose_name='Delivery Status')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('delivery_error', models.TextField(blank=True, null=True, verbose_name='Delivery Error')),
                ('seen', models.BooleanField(default=False, verbose_name='Seen')),
                ('notification_type', models.CharField(blank=True, choices=[('agent-response', 'Agent Response'), ('coach-content', 'Coach Content'), ('payment', 'Payment'), ('invoice', 'Invoice'), ('assessment-submitted', 'Assessment Submitted')], max_length=30, null=True, verbose_name='Notification Type')),
                ('notification_group', models.UUIDField(blank=True, help_text='Groups related notifications across channels', null=True, verbose_name='Notification Group')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('remind_time', models.DateTimeField(blank=True, null=True, verbose_name='Remind Time')),
                ('link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Link')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Expires')),
                ('auto_send', models.BooleanField(default=False, help_text='Automatically send via this channel', verbose_name='Auto Send')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'abstract': False,
                'indexes': [models.Index(fields=['channel', 'delivery_status'], name='strongmsp_a_channel_18902b_idx'), models.Index(fields=['notification_group'], name='strongmsp_a_notific_2397ab_idx'), models.Index(fields=['recipient', 'seen'], name='strongmsp_a_recipie_73fa97_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='paymentassignments',
            constraint=models.UniqueConstraint(condition=models.Q(('athlete__isnull', False)), fields=('athlete', 'organization', 'pre_assessment'), name='unique_athlete_assessment_org', violation_error_message='This athlete already has an assignment for this assessment in this organization.'),
        ),
        migrations.AlterUniqueTogether(
            name='userorganizations',
            unique_together={('user', 'organization')},
        ),
    ]
