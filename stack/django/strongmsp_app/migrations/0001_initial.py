# Generated by Django 5.1.10 on 2025-08-25 05:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import strongmsp_app.models
import utils.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('real_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Real Name')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('user_types', models.CharField(blank=True, choices=[('athlete', 'Athlete'), ('parent', ' parent'), ('coach', ' coach')], max_length=7, null=True, verbose_name='User Types')),
                ('confidence_score', models.IntegerField(blank=True, null=True, verbose_name='Confidence Score')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_login'],
            },
            bases=(models.Model, utils.models.BumpParentsModelMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(verbose_name='Order')),
                ('conditions', models.JSONField(blank=True, null=True, verbose_name='Conditions')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assessment Question',
                'verbose_name_plural': 'Assessment Questions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('questions', models.ManyToManyField(related_name='questions_to_assessments', to='strongmsp_app.assessmentquestions', verbose_name='Questions')),
            ],
            options={
                'verbose_name': 'Assessment',
                'verbose_name_plural': 'Assessments',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoachContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(verbose_name='Title')),
                ('body', models.TextField(verbose_name='Body')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Icon')),
                ('cover_photo', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Cover Photo')),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('authenticated', ' authenticated'), ('mentioned', ' mentioned')], default='mentioned', max_length=13, verbose_name='Privacy')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Coach')),
            ],
            options={
                'verbose_name': 'Coach Content',
                'verbose_name_plural': 'Coach Contents',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Icon')),
                ('cover_photo', models.ImageField(blank=True, null=True, upload_to=strongmsp_app.models.upload_file_path, verbose_name='Cover Photo')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('postassessment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Post-Assessment')),
                ('preassessment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.assessments', verbose_name='Pre-Assessment')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('paid', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Paid')),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('order', ' order'), ('request', ' request'), ('declined', ' declined')], max_length=8, verbose_name='Status')),
                ('subscription_ends', models.DateField(blank=True, null=True, verbose_name='Subscription Ends')),
                ('athlete', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.courses', verbose_name='Course')),
                ('preferred_coach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Preferred Coach')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromptTemplates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('prompt', models.TextField(verbose_name='Prompt')),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='Instructions')),
                ('model', models.CharField(blank=True, max_length=255, null=True, verbose_name='Model')),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', ' archived')], default='active', max_length=8, verbose_name='Status')),
                ('purpose', models.CharField(choices=[('lessonpackage', 'Lesson-package'), ('12sessions', ' 12-sessions'), ('talkingpoints', ' talking-points'), ('feedbackreport', ' feedback-report'), ('parentemail', ' parent-email')], max_length=14, verbose_name='Purpose')),
                ('response_format', models.CharField(blank=True, choices=[('text', 'Text'), ('json', 'Json')], default='text', max_length=4, null=True, verbose_name='Response Format')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prompt Template',
                'verbose_name_plural': 'Prompt Templates',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentResponses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('purpose', models.CharField(choices=[('lessonpackage', 'Lesson-package'), ('12sessions', ' 12-sessions'), ('talkingpoints', ' talking-points'), ('feedbackreport', ' feedback-report'), ('parentemail', ' parent-email')], max_length=14, verbose_name='Purpose')),
                ('message_body', models.TextField(verbose_name='Message Body')),
                ('ai_response', models.TextField(verbose_name='AI Response')),
                ('ai_reasoning', models.TextField(blank=True, null=True, verbose_name='AI Reasoning')),
                ('athlete', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('prompt_template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.prompttemplates', verbose_name='Prompt Template')),
            ],
            options={
                'verbose_name': 'Agent Response',
                'verbose_name_plural': 'Agent Responses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('help_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Help Text')),
                ('question_category', models.CharField(blank=True, choices=[('performance_mindset', 'Performance Mindset'), ('emotional_regulation', ' Emotional Regulation'), ('confidence', ' Confidence'), ('resilience__motivation', 'Resilience & Motivation'), ('concentration', ' Concentration'), ('leadership', ' Leadership'), ('mental_wellbeing', ' Mental Well-being')], max_length=22, null=True, verbose_name='Question Category')),
                ('scale', models.CharField(blank=True, choices=[('percentage', 'Percentage'), ('onetofive', 'One-to-five'), ('onetoten', 'One-to-ten')], max_length=10, null=True, verbose_name='Scale')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionResponses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('response', models.IntegerField(verbose_name='Response')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Athlete')),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.questions', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Question Response',
                'verbose_name_plural': 'Question Responses',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='assessmentquestions',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_questions', to='strongmsp_app.questions', verbose_name='Question'),
        ),
        migrations.CreateModel(
            name='Shares',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('expires', models.DateField(blank=True, null=True, verbose_name='Expires')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('content', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='strongmsp_app.coachcontent', verbose_name='Content')),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
            ],
            options={
                'verbose_name': 'Share',
                'verbose_name_plural': 'Shares',
                'abstract': False,
            },
        ),
    ]
